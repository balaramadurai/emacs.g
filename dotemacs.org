#+TITLE: Spacemacs-Lite
#+DATE: [2018-12-10 Mon]

This is a modest version of the super amazing package called Spacemacs!

* Index :TOC_3_gh:
- [[#initial][Initial]]
  - [[#who-am-i][Who am I]]
- [[#functions][Functions]]
- [[#packages][Packages]]
  - [[#diminish][Diminish]]
  - [[#general][General]]
  - [[#which-key][Which Key]]
  - [[#helm][Helm]]
  - [[#android-mode][Android mode]]
  - [[#beancount][Beancount]]
  - [[#borg-queen][Borg Queen]]
  - [[#ox-tufte-latex][Ox-tufte-latex]]
  - [[#company][Company]]
  - [[#easy-hugo][Easy Hugo]]
  - [[#emoji][Emoji]]
  - [[#ess][ESS]]
  - [[#evil][Evil]]
    - [[#evil-commentary][Evil commentary]]
    - [[#unimpaired][Unimpaired]]
    - [[#evil-tutor][Evil Tutor]]
    - [[#evil-magit][Evil Magit]]
  - [[#eyebrowse][EyeBrowse]]
  - [[#fountain][Fountain]]
  - [[#google-translate][Google Translate]]
  - [[#magit][Magit]]
  - [[#olivetti--typo][Olivetti & typo]]
  - [[#org-mode][Org Mode]]
    - [[#org-mode-package-definition-with-keybindings][Org mode package definition with keybindings]]
    - [[#org-mode-setup][Org mode Setup]]
    - [[#org-config][Org Config]]
    - [[#org-bullets][Org Bullets]]
    - [[#org-calfw][Org Calfw]]
    - [[#org-clock-convenience][Org clock convenience]]
    - [[#org-download][Org Download]]
    - [[#org-pomodoro][Org Pomodoro]]
    - [[#org-present][Org Present]]
    - [[#org-fancy-priority][Org Fancy Priority]]
    - [[#org-protocol][Org Protocol]]
    - [[#org-ref][Org Ref]]
    - [[#org-reveal][Org Reveal]]
    - [[#org-web-tools][Org web tools]]
    - [[#ox-hugo][Ox Hugo]]
    - [[#gnuplot][Gnuplot]]
  - [[#persp-mode][Persp Mode]]
  - [[#projectile][Projectile]]
  - [[#restart-emacs][Restart Emacs]]
  - [[#smartparens][Smartparens]]
  - [[#shell-pop][Shell pop]]
  - [[#toc-org][TOC org]]
  - [[#undo-tree][Undo Tree]]
  - [[#w3m][W3m]]
  - [[#writeroom][Writeroom]]
  - [[#writing-mode][Writing Mode]]
  - [[#zoom][Zoom]]
- [[#look--feel][Look & Feel]]
  - [[#theme][Theme]]
  - [[#window-numbering][Window Numbering]]
  - [[#modeline][Modeline]]
  - [[#emacs-stuff][Emacs stuff]]
  - [[#graphical-features][Graphical Features]]
    - [[#prettify-symbols][Prettify Symbols]]
- [[#emacs-functionality][Emacs Functionality]]
  - [[#emacs-basics][Emacs Basics]]
  - [[#calendar][Calendar]]
  - [[#browser][Browser]]
  - [[#backups][Backups]]
  - [[#history][History]]
  - [[#save-my-place-or-ill-rearrange-your-face][Save my place or I'll rearrange your face]]
  - [[#detect-internet-connection][Detect Internet Connection]]
- [[#startup-buffer][Startup Buffer]]
  - [[#emacs-dashboard][Emacs Dashboard]]
- [[#lastly][Lastly]]

* Initial
Initialization of the startup file. I made a design choice of moving to an org file and tangle all these blocks, since I like the modular approach that org mode allows. 

#+begin_src emacs-lisp   

(eval-and-compile
  (setq gc-cons-threshold 402653184
      gc-cons-percentage 0.6))

;; Init time start
(defvar my-init-el-start-time (current-time) "Time when init.el was started")

(setq inhibit-startup-screen t )	; inhibit useless and old-school startup screen
(setq ring-bell-function 'ignore )	; silent bell when you make a mistake
(set-language-environment "UTF-8")
(set-default-coding-systems 'utf-8)

(setq sentence-end-double-space nil)	; sentence SHOULD end with only a point.
(setq default-fill-column 99999)		; toggle wrapping to a really long line
(defalias 'yes-or-no-p 'y-or-n-p) ; Simplify life 
(setq ad-redefinition-action 'accept)         ; to get rid of the annoying "ad-handle-definition" warning
  (add-hook 'text-mode-hook
	    (lambda ()
	      (variable-pitch-mode 1)))
  (set-face-attribute 'default nil :family "Iosevka" :height 105)
  (set-face-attribute 'fixed-pitch nil :family "Iosevka" :height 105)
  (set-face-attribute 'variable-pitch nil :family "Baskerville" :height 110)
;  (flyspell-mode 1)        ;; Catch Spelling mistakes
  (blink-cursor-mode 0)    ;; Reduce visual noise

;; These instructions are coming from this website - https://sam217pa.github.io/2016/09/02/how-to-build-your-own-spacemacs/
;;
;; Packages

(use-package auto-compile
  :config (auto-compile-on-load-mode))
(setq load-prefer-newer t)
(use-package quelpa-use-package
  :init (setq quelpa-update-melpa-p nil))
(server-start)
#+end_src

** Who am I
My personal details
#+BEGIN_src emacs-lisp   
;; *****************
;; Personal Information
   (setq user-full-name "Bala Ramadurai"
      user-mail-address "bala@balaramadurai.net")

#+END_SRC

* Functions
[2018-12-07 Fri 21:06]
#+begin_src emacs-lisp   
(defun spacemacs/system-is-mac ()
  (eq system-type 'darwin))
(defun spacemacs/system-is-linux ()
  (eq system-type 'gnu/linux))
(defun spacemacs/system-is-mswindows ()
(eq system-type 'windows-nt)) 

;; found at http://emacswiki.org/emacs/KillingBuffers
(defun spacemacs-lite/kill-other-buffers (&optional arg)
  "Kill all other buffers.
If the universal prefix argument is used then will the windows too."
  (interactive "P")
  (when (yes-or-no-p (format "Killing all buffers except \"%s\"? "
                             (buffer-name)))
    (mapc 'kill-buffer (delq (current-buffer) (buffer-list)))
    (when (equal '(4) arg) (delete-other-windows))
    (message "Buffers deleted!")))

;; from magnars
(defun spacemacs-lite/delete-current-buffer-file ()
  "Removes file connected to current buffer and kills buffer."
  (interactive)
  (let ((filename (buffer-file-name))
        (buffer (current-buffer))
        (name (buffer-name)))
    (if (not (and filename (file-exists-p filename)))
        (ido-kill-buffer)
      (when (yes-or-no-p "Are you sure you want to delete this file? ")
        (delete-file filename t)
        (kill-buffer buffer)
(message "File '%s' successfully removed" filename)))))

(defun spacemacs-lite/copy-file ()
  "Write the file under new name."
  (interactive)
(call-interactively 'write-file))

;; from magnars
  ;; http://stackoverflow.com/a/10216338/4869
(defun spacemacs-lite/sudo-edit (&optional arg)
  (interactive "P")
  (let ((fname (if (or arg (not buffer-file-name))
                   (read-file-name "File: ")
                 buffer-file-name)))
    (find-file
     (cond ((string-match-p "^/ssh:" fname)
            (with-temp-buffer
	      (insert fname)
	      (search-backward ":")
	      (let ((last-match-end nil)
                    (last-ssh-hostname nil))
                (while (string-match "@\\\([^:|]+\\\)" fname last-match-end)
                  (setq last-ssh-hostname (or (match-string 1 fname)
					      last-ssh-hostname))
                  (setq last-match-end (match-end 0)))
                (insert (format "|sudo:%s" (or last-ssh-hostname "localhost"))))
	      (buffer-string)))
           (t (concat "/sudo:root@localhost:" fname))))))

;; from magnars
(defun spacemacs-lite/rename-current-buffer-file ()
  "Renames current buffer and file it is visiting."
  (interactive)
  (let* ((name (buffer-name))
        (filename (buffer-file-name)))
    (if (not (and filename (file-exists-p filename)))
        (error "Buffer '%s' is not visiting a file!" name)
      (let* ((dir (file-name-directory filename))
             (new-name (read-file-name "New name: " dir)))
        (cond ((get-buffer new-name)
               (error "A buffer named '%s' already exists!" new-name))
              (t
               (let ((dir (file-name-directory new-name)))
                 (when (and (not (file-exists-p dir)) (yes-or-no-p (format "Create directory '%s'?" dir)))
                   (make-directory dir t)))
               (rename-file filename new-name 1)
               (rename-buffer new-name)
               (set-visited-file-name new-name)
               (set-buffer-modified-p nil)
               (when (fboundp 'recentf-add-file)
                   (recentf-add-file new-name)
                   (recentf-remove-if-non-kept filename))
(message "File '%s' successfully renamed to '%s'" name (file-name-nondirectory new-name))))))))

(defun spacemacs//open-in-external-app (file-path)
  "Open `file-path' in external application."
  (cond
   ((spacemacs/system-is-mswindows) (w32-shell-execute "open" (replace-regexp-in-string "/" "\\\\" file-path)))
   ((spacemacs/system-is-mac) (shell-command (format "open \"%s\"" file-path)))
   ((spacemacs/system-is-linux) (let ((process-connection-type nil))
(start-process "" nil "xdg-open" file-path)))))

(defun spacemacs-lite/open-file-or-directory-in-external-app (arg)
  "Open current file in external application.
If the universal prefix argument is used then open the folder
containing the current file by the default explorer."
  (interactive "P")
  (if arg
      (spacemacs//open-in-external-app (expand-file-name default-directory))
    (let ((file-path (if (derived-mode-p 'dired-mode)
                         (dired-get-file-for-visit)
                       buffer-file-name)))
      (if file-path
          (spacemacs//open-in-external-app file-path)
(message "No file associated to this buffer.")))))

(defun copy-whole-buffer-to-clipboard ()
  "Copy entire buffer to clipboard"
  (interactive)
  (clipboard-kill-ring-save (point-min) (point-max)))

;; https://emacs.stackexchange.com/questions/16398/noninteractively-upgrade-all-packages
(defun package-upgrade-all ()
  "Upgrade all packages automatically without showing *Packages* buffer."
  (interactive)
  (package-refresh-contents)
  (let (upgrades)
    (cl-flet ((get-version (name where)
			   (let ((pkg (cadr (assq name where))))
			     (when pkg
			       (package-desc-version pkg)))))
      (dolist (package (mapcar #'car package-alist))
        (let ((in-archive (get-version package package-archive-contents)))
          (when (and in-archive
                     (version-list-< (get-version package package-alist)
                                     in-archive))
            (push (cadr (assq package package-archive-contents))
                  upgrades)))))
    (if upgrades
        (when (yes-or-no-p
               (message "Upgrade %d package%s (%s)? "
                        (length upgrades)
                        (if (= (length upgrades) 1) "" "s")
                        (mapconcat #'package-desc-full-name upgrades ", ")))
          (save-window-excursion
            (dolist (package-desc upgrades)
              (let ((old-package (cadr (assq (package-desc-name package-desc)
                                             package-alist))))
                (package-install package-desc)
                (package-delete  old-package)))))
      (message "All packages are up to date"))))

(defconst user-config-org-file "~/.emacs.d/dotemacs.org")

(defun find-user-init-file ()
  "Finds the user init file"
  (interactive)
  (find-file user-init-file))

(defun find-user-config-org-file ()
  "Finds the user config file"
  (interactive)
  (find-file user-config-org-file))

(defun load-user-init-file ()
    "loads the user init file"
    (interactive)
    (load-file user-init-file))

(defun show-scratch-buffer ()
  (interactive)
  (switch-to-buffer "*scratch*"))

(defun show-home-buffer ()
  (interactive)
  (switch-to-buffer "*dashboard*"))

(defun show-messages-buffer ()
  (interactive)
  (switch-to-buffer "*Messages*"))

(defun disable-all-themes ()
  "disable all active themes."
  (dolist (i custom-enabled-themes)
    (disable-theme i)
    (powerline-reset)))

(defadvice load-theme (before disable-themes-first activate)
  (disable-all-themes)
  (powerline-reset))

;; Following lines to cycle through themes adapted from ivan's answer on
;; https://emacs.stackexchange.com/questions/24088/make-a-function-to-toggle-themes
(setq my/themes (custom-available-themes))
(setq my/themes-index 0)

(defun my/cycle-theme ()
  "Cycles through my themes."
  (interactive)
  (setq my/themes-index (% (1+ my/themes-index) (length my/themes)))
  (my/load-indexed-theme))

(defun my/load-indexed-theme ()
  (load-theme (nth my/themes-index my/themes)))

(defun load-spacemacs-dark-theme ()
  "Loads `spacemacs-dark' theme"
  (interactive)
  (load-theme 'spacemacs-dark))

(defun load-spacemacs-light-theme ()
  "Loads `spacemacs-light' theme"
  (interactive)
  (load-theme 'spacemacs-light))

(defun load-poet-theme ()
  "Loads `poet' theme"
  (interactive)
  (load-theme 'poet))

(defun load-leuven-theme ()
  "Loads `leuven' theme"
  (interactive)
  (load-theme 'leuven))

(defun load-dichromacy-theme ()
  "Loads `dichromacy' theme"
  (interactive)
  (load-theme 'dichromacy))

#+end_src

* Packages
** Diminish
[2018-12-04 Tue 14:14]
#+begin_src emacs-lisp   
(use-package diminish
  
  :config
  (diminish 'eldoc-mode "")
  (diminish 'buffer-face-mode "")
  (diminish 'undo-tree-mode " Ⓤ")
)
#+end_src

** General
#+BEGIN_src emacs-lisp   
;; General package
(use-package general
  
  :after which-key
  :config
  (general-override-mode 1)

   (general-create-definer spacemacs-lite/set-leader-keys
    :states '(normal visual motion emacs)
    :prefix "SPC")

    (general-create-definer spacemacs-lite/set-leader-keys-for-major-mode
    :states '(normal emacs)
    :prefix ".")
    
    (general-define-key
    :keymaps 'key-translation-map
    "ESC" (kbd "C-g"))
    
    (general-def
    "<f2>"             'org-agenda
    "<f7>"             'org-gcal-fetch
    "M-]"              'next-buffer
    "M-["              'previous-buffer
    "C-+"              'text-scale-increase
    "C--"              'text-scale-decrease
    )

    (spacemacs-lite/set-leader-keys-for-major-mode
    ""      '(nil :which-key "Org helper"))

    (spacemacs-lite/set-leader-keys 
    ""     '(nil :which-key "Spacemacs-Lite")
    "a"    '(:ignore t :which-key "apps")
    "b"    '(:ignore t :which-key "buffer")
    "c"    '(:ignore t :which-key "comments")
    "f"    '(:ignore t :which-key "files")
    "g"    '(:ignore t :which-key "git")
    "h"    (general-simulate-key "C-h" :which-key "help")
    "i"    '(:ignore t :which-key "insert") 
    "P"    '(:ignore t :which-key "Packages")
    "q"    '(:ignore t :which-key "quit")
    "s"    '(:ignore t :which-key "search")
    "t"    '(:ignore t :which-key "themes")
    "u"    (general-simulate-key "C-u" :which-key "universal")
    "w"    '(:ignore t :which-key "window")
    "x"    '(:ignore t :which-key "text")
    "xg"   '(:ignore t :which-key "google-translate")
    "xw"   '(:ignore t :which-key "words")

    ;; Applications
    "ad"   'dired
;    "ac"   'calendar
   
    ":"    'shell-command

    ;; buffer management
    ;; "bb"   'switch-to-buffer
    "b]"   'next-buffer
    "b["   'previous-buffer
    "ba"   'copy-whole-buffer-to-clipboard
    "bc"   'write-file
    "bd"   'kill-this-buffer
    "bD"   'spacemacs-lite/kill-other-buffers
    "bR"   'rename-file-and-buffer
    "br"   'revert-buffer
    "bm"   'show-messages-buffer
    "bh"   'show-home-buffer
    "bs"   'show-scratch-buffer
    "bY"   'copy-whole-buffer-to-clipboard
    "TAB"  '(mode-line-other-buffer :wk "last buffer")

    ;; Comments
    "cl"   'comment-or-uncomment-line
    "cr"   'comment-region

    ;; file operations
    ;; "ff"   'find-file
    "fc"   '(spacemacs-lite/copy-file :wk "copy-file")
    "fD"   '(spacemacs-lite/delete-current-buffer-file :wk "delete-file") 
    "fe"   '(:ignore t :which-key "emacs")
    "fE"   '(spacemacs-lite/sudo-edit :wk "sudo-edit")
    "fed"  'find-user-init-file
    "feR"  'load-user-init-file
    "fec"  'find-user-config-org-file
    "fo"   '(spacemacs-lite/open-file-or-directory-in-external-app :wk "open-in-ext")
    "fR"   '(spacemacs-lite/rename-current-buffer-file :wk "rename-file")
    "fs"   'save-buffer

    ;; help

    ;; package manager
    "Pr"   'package-autoremove
    "Pd"   'package-delete
    "Pl"   'list-packages
    "Pi"   'package-install
    "Pu"   'package-upgrade-all

    ;; quit emacs
    "qq"   'kill-emacs

    ;; Theme operations
    "tn"  'my/cycle-theme
    "tt"  'load-theme
    "tl"  'load-leuven-theme
    "td"  'load-dichromacy-theme
    "tp"  'load-poet-theme
    "ts"  '(:ignore t :wk "spacemacs themes")
    "tsd" 'load-spacemacs-dark-theme
    "tsl" 'load-spacemacs-light-theme
    
    ;; window management
    "wm"   'delete-other-windows
    "w/"   'split-window-horizontally
    "w-"   'split-window-vertically
    "wd"   'delete-window
    
    )
    
    (general-def 'normal package-menu-mode-map
      "i"   'package-menu-mark-install
      "U"   'package-menu-mark-upgrades
      "d"   'package-menu-mark-delete
      "u"   'package-menu-mark-unmark
      "x"   'package-menu-execute
      "q"   'quit-window)
    
    (general-def 'normal borg-queen-mode-map
    "u"   'borg-queen-mark-for-checkout-auto
    "i"   'borg-queen-mark-for-assimilation
    "d"   'borg-queen-mark-for-removal
    "m"   'borg-queen-unmark
    "x"   'borg-queen-run-marks
    "q"   'quit-window)
  )
#+END_SRC

** Which Key
#+BEGIN_src emacs-lisp  
;; Which-Key
(use-package which-key
  
  :diminish (which-key-mode . " Ⓚ")
  :config
  (which-key-mode)
  (setq which-key-popup-type 'minibuffer)
  (setq which-key-sort-order 'which-key-key-order-alpha)
  (setq which-key-idle-delay 0.25)
  (setq which-key-echo-keystrokes 0.18)
  )
#+END_SRC

** Helm
#+BEGIN_src emacs-lisp
;; Helm
(use-package helm
  
  :diminish (helm-mode . " Ⓗ")
  :general
  (spacemacs-lite/set-leader-keys
    "SPC"  'helm-M-x
    "bb"   'helm-mini
    "ff"   'helm-find-files
    "fr"   'helm-recentf
    "ik"   'helm-show-kill-ring
    )
  (general-def 'emacs org-agenda-mode-map
    "<SPC><SPC>"  '(helm-M-x :wk "M-x")
    "<SPC>bb"   'helm-mini
    "<SPC>ff"   'helm-find-files
    )
  
  :config
  (helm-mode 1)
  )

(use-package helm-swoop

:general
(spacemacs-lite/set-leader-keys "ss" 'helm-swoop)
(general-def '(normal visual emacs motion) "/" 'helm-swoop-without-pre-input)
)

(use-package helm-projectile
  :general
  (spacemacs-lite/set-leader-keys
    "p"    '(:ignore t :wk "projects")
    "pr"   '(helm-projectile-recentf :wk "recent projects")
    "pf"   '(helm-projectile-find-file :wk "files")
    "pd"   '(projectile-dired :wk "directory")
    )
    
)

(use-package helm-descbinds

; :diminish
 :general
 (spacemacs-lite/set-leader-keys "?" '(helm-descbinds :wk "show keybindings"))
 :config
 (setq helm-descbinds-window-style 'split)
 :hook helm-mode-hook
)
#+end_src

** Beancount
#+BEGIN_src emacs-lisp 
(use-package beancount
  :load-path "lib/beancount/editors/emacs"
           )
#+END_SRC
** Borg Queen
[2019-01-02 Wed 20:51]
#+BEGIN_SRC emacs-lisp
(use-package borg-queen
  :config
  (setq borg-queen-pgp-global-keys '("151D01EFBD48F6E1")))
#+END_SRC

** Ox-tufte-latex
[2018-11-13 Tue 10:32]
#+BEGIN_src emacs-lisp 
(use-package ox-tufte-latex)
#+END_SRC

** Company
#+BEGIN_src emacs-lisp  
(use-package company
  
  :diminish (company-mode . " ⓐ")
  :config
  (global-company-mode t))
#+END_SRC
** Easy Hugo
[2018-01-26 Fri 11:53] 
#+BEGIN_src emacs-lisp   
  (use-package easy-hugo
  
  :general
  (spacemacs-lite/set-leader-keys "ae" 'easy-hugo)
  (general-def 'normal easy-hugo-mode-map
      "n" 'easy-hugo-newpost
      "M" 'easy-hugo-magit
      "D" 'easy-hugo-article
      "p" 'easy-hugo-preview
      "P" 'easy-hugo-publish
      "o" 'easy-hugo-open
      "d" 'easy-hugo-delete
      "e" 'easy-hugo-open
      ">" 'easy-hugo-next-blog
      "<" 'easy-hugo-previous-blog
      "c" 'easy-hugo-open-config
      "f" 'easy-hugo-open
      "N" 'easy-hugo-no-help
      "v" 'easy-hugo-view
      "r" 'easy-hugo-refresh
      "g" 'easy-hugo-refresh
      "s" 'easy-hugo-sort-time
      "S" 'easy-hugo-sort-char
      "u" 'easy-hugo-sort-publishday
      "G" 'easy-hugo-github-deploy
      "A" 'easy-hugo-amazon-s3-deploy
      "C" 'easy-hugo-google-cloud-storage-deploy
      "q" 'evil-delete-buffer
      (kbd "RET") 'easy-hugo-open)

      :config
      (setq easy-hugo-basedir "~/Nextcloud/2 Areas/Websites/balaramadurai.net/")
      (setq easy-hugo-postdir "content/blog")
      (setq easy-hugo-url "http://balaramadurai.net")
      (setq easy-hugo-sshdomain "gitlab.com")
      (setq easy-hugo-root "~/")
      (setq easy-hugo-image-directory "img")
      ;;(setq easy-hugo-previewtime "300")
      (setq easy-hugo-default-ext ".org")

      
      )
#+END_SRC
** Emoji
[2018-12-04 Tue 05:40]
#+begin_src emacs-lisp   
(use-package emojify

:init (global-emojify-mode 1))
#+end_src

** ESS
[2018-12-05 Wed 11:33]
#+begin_src emacs-lisp   
(use-package ess
)
#+end_src
** Evil

#+BEGIN_src emacs-lisp   
(use-package evil
  
  :diminish (evil-mode . " ⓔ")
  :hook (after-init . evil-mode)
  :config
  (evil-mode 1)
  (evil-set-initial-state 'shell-mode 'normal)
  (evil-set-initial-state 'package-menu-mode 'normal)
  (evil-set-initial-state 'doc-view-mode 'normal)
  (cua-mode 1)
  (setq doc-view-continuous t)
  :general
  (spacemacs-lite/set-leader-keys
    "bN"   'evil-buffer-new
    "fd"   'evil-save-and-close
    )
  )
#+END_SRC

*** Evil commentary
[2018-12-03 Mon 19:05]
#+begin_src emacs-lisp  
(use-package evil-commentary
  
  :after evil
  :diminish (evil-commentary-mode . "")
  :config (evil-commentary-mode 1)
  :general
  (spacemacs-lite/set-leader-keys
    ";"   'evil-commentary-line)
  )
#+end_src
*** Unimpaired
[2018-12-07 Fri 06:22]
#+begin_src emacs-lisp 
(use-package evil-unimpaired
  
;  :requires evil
;  :quelpa (evil-unimpaired :fetcher github :repo syl20bnr/spacemacs :files ("layers/+spacemacs/spacemacs-evil/local/evil-unimpaired/evil-unimpaired.el"))
  :load-path "lib/evil-unimpaired"
					; :diminish
					; :general
					; :config
  )
#+end_src
*** Evil Tutor
[2018-12-08 Sat 06:56]
#+begin_src emacs-lisp   
(use-package evil-tutor

; :diminish
 :general
 (general-define-key 
 :keymaps 'help-mode-map
 :which-key "evil-tutor"
 "T" 'evil-tutor) 
 :config
 (setq evil-tutor-working-directory "/tmp")
)
#+end_src
*** Evil Magit
[2018-12-08 Sat 22:59]
#+begin_src emacs-lisp   
(use-package evil-magit

; :diminish
; :general
; :config
)
#+end_src
** Fountain
[2018-06-23 Sat 17:55]
#+BEGIN_src emacs-lisp   
(use-package fountain-mode
  
  :config
  (setq fountain-pages-show-in-mode-line (quote timer))
  (setq fountain-trans-suffix-list (quote ("TO:" "WITH:" "FADE OUT" "TO BLACK" "CUT TO:"))))
#+END_SRC

** Google Translate
[2018-12-03 Mon 11:33]
#+begin_src emacs-lisp   
(use-package define-word
  
  :defer t
  :general
  (spacemacs-lite/set-leader-keys
    "xwd" 'define-word-at-point))
;;; The following functions are from https://github.com/syl20bnr/spacemacs/
  
(use-package google-translate
  
  :config
  (defun spacemacs-lite/set-google-translate-languages (source target)
    "Set source language for google translate.
For instance pass En as source for English."
    (interactive
     "sEnter source language (ie. en): \nsEnter target language (ie. en): "
     source target)
    (message
     (format "Set google translate source language to %s and target to %s"
             source target)))
  (setq google-translate-default-source-language (downcase source))
  (setq google-translate-default-target-language (downcase target))
  (setq google-translate-enable-ido-completion t)
  (setq google-translate-show-phonetic t)
  (setq google-translate-default-source-language "en")
  (setq google-translate-default-target-language "fr")
  :general
  (spacemacs-lite/set-leader-keys
    "xgl" 'spacemacs-lite/set-google-translate-languages
    "xgQ" 'google-translate-query-translate-reverse
    "xgq" 'google-translate-query-translate
    "xgT" 'google-translate-at-point-reverse
    "xgt" 'google-translate-at-point))

#+end_src

** Magit
#+BEGIN_src emacs-lisp   
(use-package magit
  
  :general
  (spacemacs-lite/set-leader-keys
    "gs"   'magit-status
    "gc"   'magit-commit-create
    "gp"   'magit-push-other
    "gS"   'magit-stage-file
    "gl"   'magit-log-all
    )
  )
#+END_SRC

** Olivetti & typo
[2018-11-22 Thu 14:36]
#+BEGIN_src emacs-lisp   
(use-package olivetti)

(use-package typo)
#+END_SRC

** Org Mode

*** Org mode package definition with keybindings
[2018-12-03 Mon 10:41]
 #+BEGIN_src emacs-lisp   
 (use-package org
   :init
   (defun my-org-mode-hooks ()
     (visual-line-mode)
     (diminish 'visual-line-mode " Ⓥ")
     (flyspell-mode)
     (diminish 'flyspell-mode " Ⓕ")
     (smartparens-mode)
     )
   (add-hook 'org-mode-hook 'my-org-mode-hooks)

   :general
   (spacemacs-lite/set-leader-keys
     "ao"   '(:ignore t :which-key "org")
     "aoc"   'org-capture
     "aol"   'org-store-link
     "aoo"   'org-agenda
     "r"     '(:ignore t :wk "Org Reviews")
     "rd"    'daily-review
     "rw"    'weekly-review
     "rq"    'quarterly-review
     "ry"    'yearly-review
     )
   (spacemacs-lite/set-leader-keys-for-major-mode 
     ","    'org-time-stamp
     "!"    'org-time-stamp-inactive
     "."    'org-ctrl-c-ctrl-c
     "'"    'org-edit-special
     ":"    'org-set-tags-command
     "*"    'org-ctrl-c-star
     "a"    'org-agenda
     "A"    'org-attach
     "c"    'org-capture
     "C"    '(:ignore t :which-key "Clocks")
     "Ci"   'org-clock-in
     "Co"   'org-clock-out
     "Cq"   'org-clock-cancel
     "e"     '(:ignore t :wk "export")
     "ee"   'org-export-dispatch
     "l"    'org-store-link
     "i"    '(:ignore t :which-key "insert")
     "id"   '(:ignore t :which-key "dates")
     "idi"  'org-time-stamp-inactive
     "ida"  'org-time-stamp
     "il"   'org-insert-link
     "d"    '(:ignore t :wk "dates")
     "ds"  'org-schedule
     "dd"  'org-deadline
     "r"    'org-refile
     "P"    'org-set-property
     "R"    '(:ignore t :which-key "Reviews")
     "Rd"   'daily-review
     "Rw"   'weekly-review
     "Rq"   'quarterly-review
     "Ry"   'yearly-review
     "s"    '(:ignore t :which-key "subtrees")
     "sc"   'org-copy-subtree
     "sa"    'org-archive-subtree
     "<right>" 'org-agenda-do-date-later
     "<left>" 'org-agenda-do-date-earlier
     "x"    'my/org-agenda-done
     )

   (general-def org-mode-map
     "<f8>"      'org-narrow-to-subtree
     "M-<f8>"    'widen
     "<f6>"          'my/org-done
     )

   (general-define-key
    :definer 'minor-mode
    :states 'normal
    :keymaps 'org-capture-mode
    ".c"           'org-capture-finalize
    ".k"           'org-capture-kill
    ".r"           'org-capture-refile)

  (general-define-key
    :definer 'minor-mode
    :states 'normal
    :keymaps 'org-src-mode
    ".c"           'org-edit-src-exit
    ".k"           'org-edit-src-abort)

  (general-define-key
    :keymaps 'org-agenda-mode-map
    ","                              'org-agenda-goto-today 
    "n"                              'org-agenda-later
    "p"                              'org-agenda-earlier
    [remap org-clock-in]             'org-agenda-clock-in
    [remap org-clock-out]            'org-agenda-clock-out
    [remap org-clock-cancel]         'org-agenda-clock-cancel
    [remap org-schedule]             'org-agenda-schedule
    [remap org-deadline]             'org-agenda-deadline)

   :config
   (defun my/org-done (&optional arg)
     "Mark current TODO as done.
   This changes the line at point, all other lines in the agenda referring to
   the same tree node, and the headline of the tree node in the Org-mode file."
     (interactive "P")
     (org-todo "DONE"))

   (defun my/org-agenda-done (&optional arg)
     "Mark current TODO as done.
   This changes the line at point, all other lines in the agenda referring to
   the same tree node, and the headline of the tree node in the Org-mode file."
     (interactive "P")
     (org-agenda-todo "DONE"))
   (defun daily-review()
     (interactive)
     (org-capture nil "rd")
     (org-capture-finallize t)
     (org-speed-move-safe 'outline-up-heading)
     (org-narrow-to-subtree)
     (fetch-calendar) 
     )
   (defun weekly-review ()
     (interactive)
     (progn
       (org-capture nil "rw")
       (org-capture-finalize t)
       (org-speed-move-safe 'outline-up-heading)
       (org-narrow-to-subtree)
       (fetch-calendar)))

   (defun quarterly-review ()
     (interactive)
     (progn
       (org-capture nil "rq")
       (org-capture-finalize t)
       (org-speed-move-safe 'outline-up-heading)
       (org-narrow-to-subtree)
       (fetch-calendar)))

   (defun yearly-review ()
     (interactive)
     (progn
       (org-capture nil "ry")
       (org-capture-finalize t)
       (org-speed-move-safe 'outline-up-heading)
       (org-narrow-to-subtree)
       (fetch-calendar)))

   )
#+END_SRC

*** Org mode Setup

**** Capture templates

#+BEGIN_src emacs-lisp  
(setq org-protocol-default-template-key "l")
;; Capture templates for: TODO tasks, Notes, appointments, phone calls, meetings, and org-protocol
(setq org-capture-templates
      (quote (("t" "todo" entry (file "~/org/inbox.org")
               "* TODO %?\nSCHEDULED: %^{Time of task?}T\n%U\n%a\n")
              ("R" "respond" entry (file "~/org/inbox.org")
               "* TODO Respond to %:from on %:subject\nSCHEDULED: %^{Time of Response?}T\n%U\n%a\n")
              ("n" "note" entry (file "~/org/notes.org")
               "* %? :NOTE:\n%U\n")
              ("T" "Meeting" entry (file "~/org/inbox.org")
               "* MEETING with %? :MEETING:\n%U" :clock-in t :clock-resume t)
              ("i" "Invoice" entry (file "~/org/inbox.org")
	       (file "~/org/templates/invoice-template.org"))
	      ("p" "Project" entry (file "~/org/inbox.org")
	       (file "~/org/templates/project-template.org"))
              ("r" "Reviews")
              ("rd" "Review: Daily Review" entry (file+olp+datetree "~/org/reviews.org" )
               (file "~/org/templates/dailyreviewtemplate.org") :tree-type day)
              ("rw" "Review: Weekly Review" entry (file+olp+datetree "~/org/reviews.org" )
               (file "~/org/templates/weeklyreviewtemplate.org") :tree-type week)
              ("rq" "Review: Quarterly Review" entry (file+olp+datetree "~/org/reviews.org")
               (file "~/org/templates/quarterlyreviewtemplate.org"))
              ("ry" "Review: Yearly Review" entry (file+olp+datetree "~/org/reviews.org")
               (file "~/org/templates/yearlyreviewtemplate.org"))
              ("s" "Someday / Maybe Idea" entry (file+headline "~/org/somedaymaybe.org" "Someday / Maybe")
               "* SOMEDAY %?\n")
              ("L" "org-protocol" entry (file "~/org/inbox.org")
               "* %^{Title}\nSource: %u, %c\n #+BEGIN_QUOTE\n%:initial\n#+END_QUOTE\n\n\n%?")
              ("l" "org-protocol link" entry (file "~/org/inbox.org")
                "* TODO %?\n [[%:link][%:description]] \n SCHEDULED: %^{Time of Response?}T\nCaptured On: %U")
              )))
#+END_SRC
**** iCalendar setup
#+begin_SRC emacs-lisp
(setq org-agenda-files '("~/org/index.org" "~/org/writing.org" "~/org/teaching.org" "~/org/learning.org" "~/org/marketing.org") )
(setq org-agenda-default-appointment-duration 30)
(setq org-icalendar-store-UID t)
(setq org-icalendar-use-scheduled (quote (event-if-todo todo-start)))

(setq org-icalendar-combined-agenda-file "~/org/org.ics")

#+end_SRC
**** Refile Setup

#+BEGIN_src emacs-lisp   
; Targets include this file and any file contributing to the agenda - up to 9 levels deep
(setq org-refile-targets (quote ((nil :maxlevel . 9)
                                 (org-agenda-files :maxlevel . 9)
                                 ("~/org/somedaymaybe.org" :maxlevel . 2)
)))

; Use full outline paths for refile targets - we file directly with IDO
(setq org-refile-use-outline-path t)

; Targets complete directly with IDO
(setq org-outline-path-complete-in-steps nil)

; Allow refile to create parent tasks with confirmation
(setq org-refile-allow-creating-parent-nodes (quote confirm))

; Use the current window for indirect buffer display
(setq org-indirect-buffer-display 'current-window)

;;;; Refile settings
; Exclude DONE state tasks from refile targets
(defun bh/verify-refile-target ()
  "Exclude todo keywords with a done state from refile targets"
  (not (member (nth 2 (org-heading-components)) org-done-keywords)))

(setq org-refile-target-verify-function 'bh/verify-refile-target)
#+END_SRC

**** Agenda properties

[2018-01-05 Fri 12:14] 
#+BEGIN_src emacs-lisp   
(setq org-agenda-files '("~/org/index.org" "~/org/writing.org" "~/org/teaching.org" "~/org/learning.org" "~/org/marketing.org" "~/org/inbox.org"))
(setq org-agenda-hide-tags-regexp nil)
(setq org-agenda-ignore-properties (quote (effort appt stats)))
(setq org-agenda-include-diary t)
(setq org-agenda-remove-tags nil)
(setq org-agenda-span 1)
(setq org-agenda-start-on-weekday 6)
(setq org-agenda-start-with-log-mode (quote (closed clock state)))
(setq org-agenda-use-tag-inheritance (quote (nil)))
(setq diary-file "~/org/mycal.org")
#+END_SRC

**** Custom Agenda Views

#+BEGIN_src emacs-lisp   
(setq org-agenda-custom-commands
      (quote
       (("rw" "Weekly Review"
         ((agenda ""
                  ((org-agenda-overriding-header "This Week & The Next")
                   (org-agenda-show-all-dates t)
                   (org-agenda-archives-mode t) 
                   (org-agenda-span
                    (quote fortnight))
                   (org-agenda-start-on-weekday 6)
                   ))
          (tags-todo "-CANCELLED-HOLD+Proj/!"
                     ((org-agenda-overriding-header "Stuck Projects")
                      (org-agenda-skip-function
                       (quote bh/skip-non-stuck-projects))
                      (org-agenda-sorting-strategy
                       (quote
                        (category-keep))))
                      )
          (tags-todo "-HOLD-CANCELLED :Proj:/!"
                     ((org-agenda-overriding-header "Projects")
                      (org-agenda-skip-function
                       (quote bh/skip-non-projects))
                      (org-tags-match-list-sublevels
                       (quote indented))
                      (org-agenda-sorting-strategy
                       (quote
                        (category-keep)))))
          (tags "SOMEDAY"
                (
                 (org-agenda-files '("~/org/somedaymaybe.org"))
                 (org-agenda-overriding-header "Someday to Inbox")))
          (tags-todo "-CANCELLED+WAITING|HOLD/!"
                     ((org-agenda-overriding-header
                       (concat "Waiting and Postponed Tasks"
                               (if bh/hide-scheduled-and-waiting-next-tasks "" " (including WAITING and SCHEDULED tasks)")))
                      (org-agenda-skip-function
                       (quote bh/skip-non-tasks))
                      (org-tags-match-list-sublevels nil)
                      (org-agenda-todo-ignore-scheduled bh/hide-scheduled-and-waiting-next-tasks)
                      (org-agenda-todo-ignore-deadlines bh/hide-scheduled-and-waiting-next-tasks)))
          (tags "-REFILE/"
                ((org-agenda-overriding-header "Tasks to Archive")
                 (org-agenda-skip-function 'bh/skip-non-archivable-tasks)
                 (org-tags-match-list-sublevels nil))))
         ((org-agenda-files '("~/org/index.org" "~/org/writing.org" "~/org/teaching.org" "~/org/learning.org" "~/org/marketing.org" "~/org/inbox.org" )))
         ("~/org/Reviews/2018-W.pdf"))
        ("rq" "Quarterly Review"
         ((tags-todo "-HOLD-CANCELLED+Proj/!"
                     ((org-agenda-overriding-header "Projects")
                      (org-agenda-skip-function
                       (quote bh/skip-non-projects))
                      (org-tags-match-list-sublevels
                       (quote indented))
                      (org-agenda-sorting-strategy
                       (quote
                        (category-keep)))))
          (tags "SOMEDAY"
                (
                 (org-agenda-files '("~/org/somedaymaybe.org"))
                 (org-agenda-overriding-header "Someday to Projects")))
          (tags "-REFILE/"
                ((org-agenda-overriding-header "Tasks to Archive")
                 (org-agenda-skip-function
                  (quote bh/skip-non-archivable-tasks))
                 (org-tags-match-list-sublevels nil)))
          )
   ((org-agenda-files '("~/org/index.org" "~/org/writing.org" "~/org/teaching.org" "~/org/learning.org" "~/org/marketing.org")))
         )
        ("ry" "Yearly Review"
         ((tags "CYear"
                ((org-agenda-overriding-header "Completed Projects")
                 (org-tags-match-list-sublevels nil)))
          (tags-todo "-HOLD-CANCELLED+Proj/!"
                     ((org-agenda-overriding-header "Projects")
                      (org-agenda-skip-function
                       (quote bh/skip-non-projects))
                      (org-tags-match-list-sublevels
                       (quote indented))
                      (org-agenda-sorting-strategy
                       (quote
                        (category-keep)))))
          (tags-todo "-CANCELLED+Proj/!"
                     ((org-agenda-overriding-header "Stuck Projects")
                      (org-agenda-skip-function
                       (quote bh/skip-non-stuck-projects))
                      (org-agenda-sorting-strategy
                       (quote
                        (category-keep)))))
          (tags "SOMEDAY"
                ((org-agenda-overriding-header "Someday to Projects"))))
   ((org-agenda-files '("~/org/index.org" "~/org/writing.org" "~/org/teaching.org" "~/org/learning.org" "~/org/marketing.org")))
         )
        ("r" . "Reviews")
        
  (" " agenda "Whole Agenda"
   ((org-agenda-include-diary t)
    (org-agenda-files '("~/org/index.org" "~/org/writing.org" "~/org/teaching.org" "~/org/learning.org" "~/org/marketing.org" "~/org/inbox.org"))))
  ("w" agenda "Work Agenda"
   (
    (org-agenda-include-diary nil)
    (org-agenda-files '("~/org/index.org" "~/org/writing.org" "~/org/teaching.org" "~/org/learning.org" "~/org/marketing.org" "~/org/inbox.org"  ))))
  )))
#+END_SRC
*** Org Config
**** Add my emacs directories

These are my standard add-on library paths
#+BEGIN_src emacs-lisp 
(add-to-list 'load-path (expand-file-name "~/.emacs.d/lib/org/contrib/lisp"))
(with-eval-after-load 'org
  (require 'ox-extra)
  (require 'ox-bibtex)
  (ox-extras-activate '(ignore-headlines))
  (ox-extras-activate '(latex-header-blocks ignore-headlines))
)

#+END_SRC

#+BEGIN_src emacs-lisp   
(add-hook 'org-mode-hook #'org-indent-mode)
;(add-hook 'text-mode-hook 'variable-pitch-mode)
#+END_SRC

**** Agenda tweaks

#+BEGIN_src emacs-lisp   

;; Keep tasks with dates on the global todo lists
(setq org-agenda-todo-ignore-with-date nil)

;; Keep tasks with deadlines on the global todo lists
(setq org-agenda-todo-ignore-deadlines nil)

;; Keep tasks with scheduled dates on the global todo lists
(setq org-agenda-todo-ignore-scheduled nil)

;; Keep tasks with timestamps on the global todo lists
(setq org-agenda-todo-ignore-timestamp nil)

;; Remove completed deadline tasks from the agenda view
(setq org-agenda-skip-deadline-if-done t)

;; Remove completed scheduled tasks from the agenda view
(setq org-agenda-skip-scheduled-if-done t)

;; Remove completed items from search results
(setq org-agenda-skip-timestamp-if-done t)


;; Show all future entries for repeating tasks
(setq org-agenda-repeating-timestamp-show-all t)

;; Show all agenda dates - even if they are empty
(setq org-agenda-show-all-dates t)


#+END_SRC

**** Handling blocked tasks

#+BEGIN_src emacs-lisp   

(setq org-enforce-todo-dependencies t)

#+END_SRC

**** Attachments

#+BEGIN_src emacs-lisp   

(setq org-id-method (quote uuidgen))

#+END_SRC

**** Logging Stuff

#+BEGIN_src emacs-lisp   

(setq org-log-done (quote time))
(setq org-log-into-drawer t)
(setq org-log-state-notes-insert-after-drawers nil)
(setq org-log-note-headings '((done        . "CLOSING NOTE %t")
                              (state       . "State %-12s from %-12S %t")
                              (note        . "Note taken on %t")
                              (reschedule  . "Schedule changed on %t: %S -> %s")
                              (delschedule . "Not scheduled, was %S on %t")
                              (redeadline  . "Deadline changed on %t: %S -> %s")
                              (deldeadline . "Removed deadline, was %S on %t")
                              (refile      . "Refiled on %t")
                              (clock-out   . "")))
#+END_SRC

**** Insert inactive timestamps and exclude from export

#+BEGIN_src emacs-lisp   :tangle no

(setq require-final-newline t)

(defvar bh/insert-inactive-timestamp t)

(defun bh/toggle-insert-inactive-timestamp ()
  (interactive)
  (setq bh/insert-inactive-timestamp (not bh/insert-inactive-timestamp))
  (message "Heading timestamps are %s" (if bh/insert-inactive-timestamp "ON" "OFF")))

(defun bh/insert-inactive-timestamp ()
  (interactive)
  (org-insert-time-stamp nil t t nil nil nil))

(defun bh/insert-heading-inactive-timestamp ()
  (save-excursion
    (when bh/insert-inactive-timestamp
      (org-return)
      (org-cycle)
      (bh/insert-inactive-timestamp))))

(add-hook 'org-insert-heading-hook 'bh/insert-heading-inactive-timestamp 'append)

(setq org-export-with-timestamps nil)

(setq org-return-follows-link t)

#+END_SRC
**** Remove multiple state change log details from the agenda
:PROPERTIES:
:CUSTOM_ID: StateChangeDetailsInAgenda
:END:

[2011-04-30 Sat 11:14]

I skip multiple timestamps for the same entry in the agenda view with the following setting.


#+BEGIN_src emacs-lisp   
(setq org-agenda-skip-additional-timestamps-same-entry t)
#+END_SRC

This removes the clutter of extra state change log details when multiple timestamps
exist in a single entry.

**** Drop old style references in tables
:PROPERTIES:
:CUSTOM_ID: OldTableReferences
:END:

[2011-04-30 Sat 11:19]

I drop the old A3/B4 style references from tables when editing with the
following setting.


#+BEGIN_src emacs-lisp   
(setq org-table-use-standard-references (quote from))
#+END_SRC

**** Use the current window for the agenda
:PROPERTIES:
:CUSTOM_ID: CurrentWindowForAgenda
:END:

[2011-05-28 Sat 21:20]


#+BEGIN_src emacs-lisp   
; Overwrite the current window with the agenda
(setq org-agenda-window-setup 'current-window)
#+END_SRC

**** Delete IDs when cloning
:PROPERTIES:
:CUSTOM_ID: DeleteIdsWhenCloning
:END:

[2011-05-28 Sat 21:27]


#+BEGIN_src emacs-lisp   
(setq org-clone-delete-id t)
#+END_SRC

**** Cycling plain lists
:PROPERTIES:
:CUSTOM_ID: CyclePlainLists
:END:

Org mode can fold (cycle) plain lists.

#+BEGIN_src emacs-lisp   
(setq org-cycle-include-plain-lists t)
#+END_SRC

I find this setting useful when I have repeating tasks with lots of sublists with
checkboxes.  I can fold the completed list entries and focus on what is remaining easily.

**** Showing source block syntax highlighting
:PROPERTIES:
:CUSTOM_ID: ShowSrcBlockSyntax
:END:

It is possible to display org-mode source blocks fontified in their
native mode.  This allows colourization of keywords for C and shell
script source etc.  If I edit the source I use =C-c '= (control-c single
quote) to bring up the source window which is then rendered with
syntax highlighting in the native mode.  This setting also shows the
syntax highlighting when viewing in the org-mode buffer.


#+BEGIN_src emacs-lisp   
(setq org-src-fontify-natively t)
#+END_SRC

**** Inserting Structure Template Blocks
:PROPERTIES:
:CUSTOM_ID: StructureTemplateBlocks
:END:

[2012-03-04 Sun 11:42]

There is a shortcut key sequence in org-mode to insert structure templates
quickly into your org files.

I use example and source blocks often in my org files.

| Key Sequence | Expands to                        |
|--------------+-----------------------------------|
| < s TAB      | #+BEGIN_SRC ... #+END_SRC         |
| < e TAB      | #+begin_example ... #+end_example |


#+BEGIN_src emacs-lisp   
(with-eval-after-load 'org
  (require 'org-tempo)
  (require 'org-habit)
  (require 'org-checklist)
  )
(setq org-structure-template-alist
      (quote(("q" . "QUOTE")
             ("v" . "VERSE")
             ("muse" . "SRC emacs-lisp \n(use-package ?\n\n;:quelpa (<package-name> :fetcher <github|bitbucket> :repo <name of repo> :files (\"<path>/<file.el>\")\n;) :diminish\n; :general\n; :config\n)\n")
             ("m" . "SRC emacs-lisp") 
             ("r" . "SRC R :results output :session *R* :exports both")
             ("R" . "SRC R :results output graphics :file (org-babel-temp-file \"figure\" \".png\") :exports both :width 600 :height 400 :session *R*")
             ("RR" . "SRC R :results output graphics :file  (org-babel-temp-file (concat (file-name-directory (or load-file-name buffer-file-name)) \"figure-\") \".png\") :exports both :width 600 :height 400 :session *R*")
             ("p" . "SRC python :results output :exports both")
             ("P" . "SRC python :results output :session :exports both")
             ("PP" . "SRC python :results file :session :var matplot_lib_filename=(org-babel-temp-file \"figure\" \".png\") :exports both\nimport matplotlib.pyplot as plt\n\nimport numpy\nx=numpy.linspace(-15,15)\nplt.figure(figsize=(10,5))\nplt.plot(x,numpy.cos(x)/x)\nplt.tight_layout()\n\nplt.savefig(matplot_lib_filename)\nmatplot_lib_filename")
             )))
#+END_SRC

**** Next is for tasks
:PROPERTIES:
:CUSTOM_ID: NextTasks
:END:

[2012-03-04 Sun 12:41]

=NEXT= keywords are for *tasks* and not *projects*.  I've added a
function to the todo state change hook and clock in hook so that any
parent tasks marked =NEXT= automagically change from =NEXT= to =TODO=
since they are now projects and not tasks.


#+BEGIN_src emacs-lisp   
(defun bh/mark-next-parent-tasks-todo ()
  "Visit each parent task and change NEXT states to TODO"
  (let ((mystate (or (and (fboundp 'org-state)
                          state)
                     (nth 2 (org-heading-components)))))
    (when mystate
      (save-excursion
        (while (org-up-heading-safe)
          (when (member (nth 2 (org-heading-components)) (list "NEXT"))
            (org-todo "TODO")))))))

(add-hook 'org-after-todo-state-change-hook 'bh/mark-next-parent-tasks-todo 'append)
(add-hook 'org-clock-in-hook 'bh/mark-next-parent-tasks-todo 'append)
#+END_SRC

**** Startup in folded view
:PROPERTIES:
:CUSTOM_ID: StartupView
:END:

[2012-04-08 Sun 07:26]

Startup in folded view.


#+BEGIN_src emacs-lisp   
(setq org-startup-folded t)
#+END_SRC

I used to use content view by default so I could review org subtrees
before archiving but my archiving workflow has changed so I no longer
need this manual step.

**** Allow alphabetical list entries
#+BEGIN_src emacs-lisp   
(setq org-alphabetical-lists t)
#+END_SRC

In order for filling to work correctly this needs to be set before the
exporters are loaded.

**** Preserving source block indentation
:PROPERTIES:
:CUSTOM_ID: PreserveSourceIndentations
:END:

I do not preserve indentation for source blocks mainly because this doesn't look
nice with indented org-files.  The only reason I've found to preserve indentation is
when TABs in files need to be preserved (e.g. Makefiles).  I don't normally edit
these files in org-mode so I leave this setting turned off.

I've changed the default block indentation so that it is not indented
from the text in the org file.  This allows editing source blocks in 
place without requiring use of =C-c '= so that code lines up correctly.


#+BEGIN_src emacs-lisp   
(setq org-src-preserve-indentation nil)
(setq org-edit-src-content-indentation 0)
#+END_SRC

**** Prevent editing invisible text
:PROPERTIES:
:CUSTOM_ID: PreventInvisibleEdits
:END:

[2012-07-20 Fri 22:26]

The following setting prevents accidentally editing hidden text when the point is inside a folded region.
This can happen if you are in the body of a heading and globally fold the org-file with =S-TAB=

I find invisible edits (and undo's) hard to deal with so now I can't edit invisible text.  
=C-c C-r= (org-reveal) will display where the point is if it is buried in invisible text
to allow editing again.


#+BEGIN_src emacs-lisp   
(setq org-catch-invisible-edits 'smart)
#+END_SRC

****  In collapsed view, hide empty lines between subtrees
[2019-06-04 Tue 08:33]

Set org-cycle-separator-lines to 0. Gives a more compact and consistent view, especially in a large Org file with many headings.

#+BEGIN_src emacs-lisp   
(setq org-cycle-separator-lines 0)
#+END_SRC


**** Use utf-8 as default coding system
:PROPERTIES:
:CUSTOM_ID: DefaultCodingSystem
:END:

[2013-01-01 Tue 13:49]

I use =utf-8= as the default coding system for all of my org files.


#+BEGIN_src emacs-lisp   
(setq org-export-coding-system 'utf-8)
(prefer-coding-system 'utf-8)
(set-charset-priority 'unicode)
(setq default-process-coding-system '(utf-8-unix . utf-8-unix))
#+END_SRC

**** Keep clock durations in hours
:PROPERTIES:
:CUSTOM_ID: ClockDurationsNoDays
:END:

[2013-02-17 Sun 12:37]

The default for clock durations has changed to include days which is
24 hours.  At work I like to think of a day as 6 hours of work (the
rest of the time is lost in meetings and other overhead on average) so
displaying clock durations in days doesn't make sense to me.

The following setting displays clock durations (from =C-c C-x C-d= in
hours and minutes.


#+BEGIN_src emacs-lisp   
(setq org-time-clocksum-format
      '(:hours "%d" :require-hours t :minutes ":%02d" :require-minutes t))
#+END_SRC

**** Create unique IDs for tasks when linking
:PROPERTIES:
:CUSTOM_ID: LinkingToTaskCreatesId
:END:

[2013-06-23 Sun 10:38]

The following setting creates a unique task ID for the heading in the
=PROPERTY= drawer when I use =C-c l=.  This allows me to move the task
around arbitrarily in my org files and the link to it still works.


#+BEGIN_src emacs-lisp   
(setq org-id-link-to-org-use-id 'create-if-interactive-and-no-custom-id)
#+END_SRC

#+BEGIN_src emacs-lisp   

(setq org-emphasis-alist (quote (("*" bold "<b>" "</b>")
                                 ("/" italic "<i>" "</i>")
                                 ("_" underline "<span style=\"text-decoration:underline;\">" "</span>")
                                 ("=" org-code "<code>" "</code>" verbatim)
                                 ("~" org-verbatim "<code>" "</code>" verbatim)
				 ("+" '(:strike-through t :foreground "gray"))
				 ("+" org-emphasis-alist :key 'car :test 'equal))))

(setq org-use-sub-superscripts nil)

(setq org-odd-levels-only nil)

(run-at-time "00:59" 3600 'org-save-all-org-buffers)
#+END_SRC

#+BEGIN_src emacs-lisp   

(defun org-set-line-checkbox (arg)
  (interactive "P")
  (let ((n (or arg 1)))
    (when (region-active-p)
      (setq n (count-lines (region-beginning)
                           (region-end)))
      (goto-char (region-beginning)))
    (dotimes (i n)
      (beginning-of-line)
      (insert "- [ ] ")
      (forward-line))
    (beginning-of-line)))
#+END_SRC
**** Place tags on Org Agenda
[2018-11-13 Tue 11:56]
#+BEGIN_src emacs-lisp   
    ;; Place tags close to the right-hand side of the window
    (add-hook 'org-finalize-agenda-hook 'place-agenda-tags)
    (defun place-agenda-tags ()
      "Put the agenda tags by the right border of the agenda window."
      (setq org-agenda-tags-column (- 4 (window-width)))
      (org-agenda-align-tags))
#+END_SRC

#+BEGIN_src emacs-lisp   
(defun clocktable-by-tag/shift-cell (n)
  (let ((str ""))
    (dotimes (i n)
      (setq str (concat str "| ")))
    str))

(defun clocktable-by-tag/insert-tag (params)
  (let ((tag (plist-get params :tags)))
    (insert "|--\n")
    (insert (format "| %s | *Tag time* |\n" tag))
    (let ((total 0))
  (mapcar
       (lambda (file)
     (let ((clock-data (with-current-buffer (find-file-noselect file)
                 (org-clock-get-table-data (buffer-name) params))))
       (when (> (nth 1 clock-data) 0)
         (setq total (+ total (nth 1 clock-data)))
         (insert (format "| | File *%s* | %.2f |\n"
                 (file-name-nondirectory file)
                 (/ (nth 1 clock-data) 60.0)))
         (dolist (entry (nth 2 clock-data))
           (insert (format "| | . %s%s | %s %.2f |\n"
                   (org-clocktable-indent-string (nth 0 entry))
                   (nth 1 entry)
                   (clocktable-by-tag/shift-cell (nth 0 entry))
                   (/ (nth 3 entry) 60.0)))))))
       (org-agenda-files))
      (save-excursion
    (re-search-backward "*Tag time*")
    (org-table-next-field)
    (org-table-blank-field)
    (insert (format "*%.2f*" (/ total 60.0)))))
    (org-table-align)))

(defun org-dblock-write:clocktable-by-tag (params)
  (insert "| Tag | Headline | Time (h) |\n")
  (insert "|     |          | <r>  |\n")
  (let ((tags (plist-get params :tags)))
    (mapcar (lambda (tag)
          (setq params (plist-put params :tags tag))
          (clocktable-by-tag/insert-tag params))
        tags)))
#+END_SRC

#+BEGIN_src emacs-lisp   
(defun my-tbl-export (name)
  "Search for table named `NAME` and export."
  (interactive "s")
  (show-all)
  (let ((case-fold-search t))
    (if (search-forward-regexp (concat "#\\+NAME: +" name) nil t)
    (progn
      (next-line)
      (next-line)
      (next-line)
      (org-table-export (format "%s.csv" name+org-time-stamp) "orgtbl-to-csv")))))
#+END_SRC

#+RESULTS:
: my-tbl-export
**** Org mode customizations
[2018-11-26 Mon 16:57]
#+BEGIN_src emacs-lisp   
;(setq cua-mode t)
(setq fill-column 99999)
(setq paradox-automatically-star t)
(setq paradox-github-token "c8f68f39b767601a0af9df982990a68783c42642")
(setq send-mail-function (quote smtpmail-send-it))

#+END_SRC

**** Clocking setup

#+BEGIN_src emacs-lisp   

(defun bh/find-project-task ()
  "Move point to the parent (project) task if any"
  (save-restriction
    (widen)
    (let ((parent-task (save-excursion (org-back-to-heading 'invisible-ok) (point))))
      (while (org-up-heading-safe)
	(when (member (nth 2 (org-heading-components)) org-todo-keywords-1)
	  (setq parent-task (point))))
      (goto-char parent-task)
      parent-task)))
#+END_SRC


#+BEGIN_src emacs-lisp   
(setq org-clock-clocked-in-display (quote mode-line))
(setq org-clock-idle-time nil)
(setq org-clock-out-remove-zero-time-clocks nil)
(setq org-clocktable-defaults
   (quote
    (:maxlevel 2 :lang "en" :scope file :block nil :wstart 1 :mstart 1 :tstart nil :tend nil :step nil :stepskip0 nil :fileskip0 nil :link nil :narrow 40! :indent t :timestamp nil :level nil :tcolumns nil :formatter nil :inherit-props t :emphasize t)))
(setq org-columns-default-format "%80ITEM(Task) %10Effort(Effort){:} %10CLOCKSUM")

;; Clock out when moving task to a done state
(setq org-clock-out-when-done t)
(setq org-stuck-projects (quote ("" nil nil "")))
#+END_SRC


#+BEGIN_src emacs-lisp   

(defun bh/is-project-p ()
  "Any task with a todo keyword subtask"
  (save-restriction
    (widen)
    (let ((has-subtask)
          (subtree-end (save-excursion (org-end-of-subtree t)))
          (is-a-task (member (nth 2 (org-heading-components)) org-todo-keywords-1)))
      (save-excursion
        (forward-line 1)
        (while (and (not has-subtask)
                    (< (point) subtree-end)
                    (re-search-forward "^\*+ " subtree-end t))
          (when (member (org-get-todo-state) org-todo-keywords-1)
            (setq has-subtask t))))
      (and is-a-task has-subtask))))

(defun bh/is-project-subtree-p ()
  "Any task with a todo keyword that is in a project subtree.
Callers of this function already widen the buffer view."
  (let ((task (save-excursion (org-back-to-heading 'invisible-ok)
                              (point))))
    (save-excursion
      (bh/find-project-task)
      (if (equal (point) task)
          nil
        t))))

(defun bh/is-task-p ()
  "Any task with a todo keyword and no subtask"
  (save-restriction
    (widen)
    (let ((has-subtask)
          (subtree-end (save-excursion (org-end-of-subtree t)))
          (is-a-task (member (nth 2 (org-heading-components)) org-todo-keywords-1)))
      (save-excursion
        (forward-line 1)
        (while (and (not has-subtask)
                    (< (point) subtree-end)
                    (re-search-forward "^\*+ " subtree-end t))
          (when (member (org-get-todo-state) org-todo-keywords-1)
            (setq has-subtask t))))
      (and is-a-task (not has-subtask)))))

(defun bh/is-subproject-p ()
  "Any task which is a subtask of another project"
  (let ((is-subproject)
        (is-a-task (member (nth 2 (org-heading-components)) org-todo-keywords-1)))
    (save-excursion
      (while (and (not is-subproject) (org-up-heading-safe))
        (when (member (nth 2 (org-heading-components)) org-todo-keywords-1)
          (setq is-subproject t))))
    (and is-a-task is-subproject)))

(defun bh/list-sublevels-for-projects-indented ()
  "Set org-tags-match-list-sublevels so when restricted to a subtree we list all subtasks.
  This is normally used by skipping functions where this variable is already local to the agenda."
  (if (marker-buffer org-agenda-restrict-begin)
      (setq org-tags-match-list-sublevels 'indented)
    (setq org-tags-match-list-sublevels nil))
  nil)

(defun bh/list-sublevels-for-projects ()
  "Set org-tags-match-list-sublevels so when restricted to a subtree we list all subtasks.
  This is normally used by skipping functions where this variable is already local to the agenda."
  (if (marker-buffer org-agenda-restrict-begin)
      (setq org-tags-match-list-sublevels t)
    (setq org-tags-match-list-sublevels nil))
  nil)

(defvar bh/hide-scheduled-and-waiting-next-tasks t)

(defun bh/toggle-next-task-display ()
  (interactive)
  (setq bh/hide-scheduled-and-waiting-next-tasks (not bh/hide-scheduled-and-waiting-next-tasks))
  (when  (equal major-mode 'org-agenda-mode)
    (org-agenda-redo))
  (message "%s WAITING and SCHEDULED NEXT Tasks" (if bh/hide-scheduled-and-waiting-next-tasks "Hide" "Show")))

(defun bh/skip-stuck-projects ()
  "Skip trees that are not stuck projects"
  (save-restriction
    (widen)
    (let ((next-headline (save-excursion (or (outline-next-heading) (point-max)))))
      (if (bh/is-project-p)
          (let* ((subtree-end (save-excursion (org-end-of-subtree t)))
                 (has-next ))
            (save-excursion
              (forward-line 1)
              (while (and (not has-next) (< (point) subtree-end) (re-search-forward "^\\*+ NEXT " subtree-end t))
                (unless (member "WAITING" (org-get-tags))
                  (setq has-next t))))
            (if has-next
                nil
              next-headline)) ; a stuck project, has subtasks but no next task
        nil))))

(defun bh/skip-non-stuck-projects ()
  "Skip trees that are not stuck projects"
  ;; (bh/list-sublevels-for-projects-indented)
  (save-restriction
    (widen)
    (let ((next-headline (save-excursion (or (outline-next-heading) (point-max)))))
      (if (bh/is-project-p)
          (let* ((subtree-end (save-excursion (org-end-of-subtree t)))
                 (has-next ))
            (save-excursion
              (forward-line 1)
              (while (and (not has-next) (< (point) subtree-end) (re-search-forward "^\\*+ NEXT " subtree-end t))
                (unless (member "WAITING" (org-get-tags))
                  (setq has-next t))))
            (if has-next
                next-headline
              nil)) ; a stuck project, has subtasks but no next task
        next-headline))))

(defun bh/skip-non-projects ()
  "Skip trees that are not projects"
  ;; (bh/list-sublevels-for-projects-indented)
  (if (save-excursion (bh/skip-non-stuck-projects))
      (save-restriction
        (widen)
        (let ((subtree-end (save-excursion (org-end-of-subtree t))))
          (cond
           ((bh/is-project-p)
            nil)
           ((and (bh/is-project-subtree-p) (not (bh/is-task-p)))
            nil)
           (t
            subtree-end))))
    (save-excursion (org-end-of-subtree t))))

(defun bh/skip-project-trees-and-habits ()
  "Skip trees that are projects"
  (save-restriction
    (widen)
    (let ((subtree-end (save-excursion (org-end-of-subtree t))))
      (cond
       ((bh/is-project-p)
        subtree-end)
       ((org-is-habit-p)
        subtree-end)
       (t
        nil)))))

(defun bh/skip-projects-and-habits-and-single-tasks ()
  "Skip trees that are projects, tasks that are habits, single non-project tasks"
  (save-restriction
    (widen)
    (let ((next-headline (save-excursion (or (outline-next-heading) (point-max)))))
      (cond
       ((org-is-habit-p)
        next-headline)
       ((and bh/hide-scheduled-and-waiting-next-tasks
             (member "WAITING" (org-get-tags)))
        next-headline)
       ((bh/is-project-p)
        next-headline)
       ((and (bh/is-task-p) (not (bh/is-project-subtree-p)))
        next-headline)
       (t
        nil)))))

(defun bh/skip-project-tasks-maybe ()
  "Show tasks related to the current restriction.
When restricted to a project, skip project and sub project tasks, habits, NEXT tasks, and loose tasks.
When not restricted, skip project and sub-project tasks, habits, and project related tasks."
  (save-restriction
    (widen)
    (let* ((subtree-end (save-excursion (org-end-of-subtree t)))
           (next-headline (save-excursion (or (outline-next-heading) (point-max))))
           (limit-to-project (marker-buffer org-agenda-restrict-begin)))
      (cond
       ((bh/is-project-p)
        next-headline)
       ((org-is-habit-p)
        subtree-end)
       ((and (not limit-to-project)
             (bh/is-project-subtree-p))
        subtree-end)
       ((and limit-to-project
             (bh/is-project-subtree-p)
             (member (org-get-todo-state) (list "NEXT")))
        subtree-end)
       (t
        nil)))))

(defun bh/skip-project-tasks ()
  "Show non-project tasks.
Skip project and sub-project tasks, habits, and project related tasks."
  (save-restriction
    (widen)
    (let* ((subtree-end (save-excursion (org-end-of-subtree t))))
      (cond
       ((bh/is-project-p)
        subtree-end)
       ((org-is-habit-p)
        subtree-end)
       ((bh/is-project-subtree-p)
        subtree-end)
       (t
        nil)))))

(defun bh/skip-non-project-tasks ()
  "Show project tasks.
Skip project and sub-project tasks, habits, and loose non-project tasks."
  (save-restriction
    (widen)
    (let* ((subtree-end (save-excursion (org-end-of-subtree t)))
           (next-headline (save-excursion (or (outline-next-heading) (point-max)))))
      (cond
       ((bh/is-project-p)
        next-headline)
       ((org-is-habit-p)
        subtree-end)
       ((and (bh/is-project-subtree-p)
             (member (org-get-todo-state) (list "NEXT")))
        subtree-end)
       ((not (bh/is-project-subtree-p))
        subtree-end)
       (t
        nil)))))

(defun bh/skip-projects-and-habits ()
  "Skip trees that are projects and tasks that are habits"
  (save-restriction
    (widen)
    (let ((subtree-end (save-excursion (org-end-of-subtree t))))
      (cond
       ((bh/is-project-p)
        subtree-end)
       ((org-is-habit-p)
        subtree-end)
       (t
        nil)))))

(defun bh/skip-non-subprojects ()
  "Skip trees that are not projects"
  (let ((next-headline (save-excursion (outline-next-heading))))
    (if (bh/is-subproject-p)
        nil
      next-headline)))

(setq org-archive-mark-done nil)
(setq org-archive-location "%s_archive::")

(defadvice org-archive-subtree (around fix-hierarchy activate)
  (let* ((fix-archive-p (and (not current-prefix-arg)
                             (not (use-region-p))))
         (afile (org-extract-archive-file (org-get-local-archive-location)))
         (buffer (or (find-buffer-visiting afile) (find-file-noselect afile))))
    ad-do-it
    (when fix-archive-p
      (with-current-buffer buffer
        (goto-char (point-max))
        (while (org-up-heading-safe))
        (let* ((olpath (org-entry-get (point) "ARCHIVE_OLPATH"))
               (path (and olpath (split-string olpath "/")))
               (level 1)
               tree-text)
          (when olpath
            (org-mark-subtree)
            (setq tree-text (buffer-substring (region-beginning) (region-end)))
            (let (this-command) (org-cut-subtree))
            (goto-char (point-min))
            (save-restriction
              (widen)
              (-each path
                (lambda (heading)
                  (if (re-search-forward
                       (rx-to-string
                        `(: bol (repeat ,level "*") (1+ " ") ,heading)) nil t)
                      (org-narrow-to-subtree)
                    (goto-char (point-max))
                    (unless (looking-at "^")
                      (insert "\n"))
                    (insert (make-string level ?*)
                            " "
                            heading
                            "\n"))
                  (cl-incf level)))
              (widen)
              (org-end-of-subtree t t)
              (org-paste-subtree level tree-text))))))))

(defun bh/skip-non-archivable-tasks ()
  "Skip trees that are not available for archiving"
  (save-restriction
    (widen)
    ;; Consider only tasks with done todo headings as archivable candidates
    (let ((next-headline (save-excursion (or (outline-next-heading) (point-max))))
          (subtree-end (save-excursion (org-end-of-subtree t))))
      (if (member (org-get-todo-state) org-todo-keywords-1)
          (if (member (org-get-todo-state) org-done-keywords)
              (let* ((daynr (string-to-number (format-time-string "%d" (current-time))))
                     (a-month-ago (* 60 60 24 (+ daynr 1)))
                     (last-month (format-time-string "%Y-%m-" (time-subtract (current-time) (seconds-to-time a-month-ago))))
                     (this-month (format-time-string "%Y-%m-" (current-time)))
                     (subtree-is-current (save-excursion
                                           (forward-line 1)
                                           (and (< (point) subtree-end)
                                                (re-search-forward (concat last-month "\\|" this-month) subtree-end t)))))
                (if subtree-is-current
                    subtree-end ; Has a date in this month or last month, skip it
                  nil))  ; available to archive
            (or subtree-end (point-max)))
        next-headline))))

#+END_SRC

**** Backup setup
#+BEGIN_src emacs-lisp   
(setq backup-directory-alist `(("." . "~/.saves")))

#+END_SRC
   [2018-08-01 Wed 12:03]
**** Exporter Setup

#+BEGIN_src emacs-lisp   
(setq org-alphabetical-lists t)
(setq org-ditaa-jar-path "~/org/Misc/ditaa.jar")
(setq org-plantuml-jar-path "~/org/Misc/plantuml.jar")
(setq org-reveal-external-plugins
   (quote
    ((menu . "{src: '%splugin/menu/menu.js'}")
     (toolbar . "{src: '%splugin/toolbar/toolbar.js'}")
     (jump . "{ src: '%splugin/jump/jump.js', async: true }")
     (zoom-js . "{ src: '%splugin/zoom-js/zoom.js', async: true }"))))
 
#+END_SRC
**** Org-babel setup

#+BEGIN_src emacs-lisp   

(org-babel-do-load-languages
 (quote org-babel-load-languages)
 (quote ((emacs-lisp  . t)
         (dot . t)
         (ditaa . t)
	 (R . t)
         (python . t)
         (ruby . t)
         (gnuplot . t)
	 ;;        (clojure . t)
	 (shell . t)
	 ;;        (ledger . t)
         (org . t)
         (plantuml . t)
         (latex . t))))

(setq org-confirm-babel-evaluate nil)

(add-to-list 'org-src-lang-modes (quote ("plantuml" . fundamental)))

(setq org-html-inline-images t)
(setq org-export-with-sub-superscripts nil)
(setq org-html-head-include-default-style nil)
; Do not generate internal css formatting for HTML exports
(setq org-export-htmlize-output-type (quote css))
; Export with LaTeX fragments
(setq org-export-with-LaTeX-fragments t)
; Increase default number of headings to export
(setq org-export-headline-levels 6)

(setq org-export-allow-BIND t)
(setq org-export-allow-bind-keywords t)

#+END_SRC

**** Tasks
***** Org-Todo keywords and colors

#+BEGIN_src emacs-lisp   

(setq org-todo-keywords
      (quote ((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)")
              (sequence "WAITING(w@/!)" "HOLD(h@/!)" "SOMEDAY(s)" "|" "CANCELLED(c@/!)" "PHONE" "MEETING")
	      (sequence "BOOK(k)" "|" "BOOKED(b@/!)" "PAID(p)")
	      (sequence "TODO(t)" "DRAFT(f@/!)" "FUTURE" "|""POSTED(o)")
        (sequence "REWARD(r)"))))

(setq org-todo-state-tags-triggers
      (quote (("CANCELLED" ("CANCELLED" . t))
              ("WAITING" ("WAITING" . t))
              ("HOLD" ("WAITING") ("HOLD" . t))
              (done ("WAITING") ("HOLD"))
              ("TODO" ("WAITING") ("CANCELLED") ("HOLD"))
              ("NEXT" ("WAITING") ("CANCELLED") ("HOLD"))
              ("DONE" ("WAITING") ("CANCELLED") ("HOLD"))
	      ("SOMEDAY" ("SOMEDAY" . t)))))
#+END_SRC

***** Fast Todo Selection
:PROPERTIES:
:CUSTOM_ID: FastTodoSelection
:END:

Fast todo selection allows changing from any task todo state to any
other state directly by selecting the appropriate key from the fast
todo selection key menu.  This is a great feature!


#+BEGIN_src emacs-lisp   
(setq org-use-fast-todo-selection t)
#+END_SRC

Changing a task state is done with =C-c C-t KEY=

where =KEY= is the appropriate fast todo state selection key as defined in =org-todo-keywords=.

The setting

#+BEGIN_src emacs-lisp   
(setq org-treat-S-cursor-todo-selection-as-state-change nil)
#+END_SRC
allows changing todo states with S-left and S-right skipping all of
the normal processing when entering or leaving a todo state.  This
cycles through the todo states but skips setting timestamps and
entering notes which is very convenient when all you want to do is fix
up the status of an entry.

**** Remove empty property drawers

#+BEGIN_src emacs-lisp   

(defun br/org-remove-empty-propert-drawers ()
  "*Remove all empty property drawers in current file."
  (interactive)
  (unless (eq major-mode 'org-mode)
    (error "You need to turn on Org mode for this function."))
  (save-excursion
    (goto-char (point-min))
    (while (re-search-forward ":ID:" nil t)
      (save-excursion
        (org-remove-empty-drawer-at "ID" (match-beginning 0))))))

#+END_SRC

**** Misc Org settings
[2018-01-05 Fri 12:40] 
***** Prettify Symbols
#+BEGIN_src emacs-lisp   
(global-prettify-symbols-mode +1)
(setq org-ellipsis "▼")

(add-hook 'org-mode-hook
              (lambda ()
                ;; (push '("TODO"  . ?⏹) prettify-symbols-alist)
                (push '("NEXT"  . ?☞) prettify-symbols-alist)
                (push '("MEETING"  . ?📲) prettify-symbols-alist)
                (push '("DONE"  . ?✓) prettify-symbols-alist)
                (push '("CANCELLED"  . ?✘) prettify-symbols-alist)
		;(push '("CLOCK"  . ?⏰) prettify-symbols-alist)
		;(push '("SCHEDULED"  . ?📅) prettify-symbols-alist)
))

(add-hook 'org-babel-after-execute-hook 'org-display-inline-images) 
(add-hook 'org-agenda-mode-hook
              (lambda ()
		(push '("Learning:"  . ?⏰) prettify-symbols-alist)
		(push '("Scheduled:"  . ?📅) prettify-symbols-alist)
))
#+END_SRC

***** Others
[2018-08-03 Fri 04:46]
#+BEGIN_src emacs-lisp   

(setq org-deadline-warning-days 0)
(setq org-duration-format (quote ((special . h:mm))))
(setq org-fontify-done-headline t)
(setq org-footnote-auto-adjust t)
(setq org-footnote-auto-label (quote plain))
(setq org-hide-leading-stars t)
(setq org-icalendar-timezone "Asia/Calcutta")
(setq org-latex-pdf-process
      '("pdflatex -interaction nonstopmode -output-directory %o %f"
	"bibtex %b"
	"pdflatex -interaction nonstopmode -output-directory %o %f"
	"pdflatex -interaction nonstopmode -output-directory %o %f"))
(setq org-log-reschedule (quote time))
(setq org-pandoc-epub-rights
   "Copyright Ã‚Â© 2016 Dr. Bala Ramadurai <bala@balaramadurai.net>")
(setq org-show-mode t)
(setq org-startup-truncated nil)
(setq org-support-shift-select t)
(setq org-tags-column -117)
#+END_SRC

**** Latex settings

#+BEGIN_src emacs-lisp  

(add-to-list 'org-latex-classes
	     '("beamer"
               "\\documentclass\[presentation\]\{beamer\}"
               ("\\section\{%s\}" . "\\section*\{%s\}")
               ("\\subsection\{%s\}" . "\\subsection*\{%s\}")
               ("\\subsubsection\{%s\}" . "\\subsubsection*\{%s\}")))

(add-to-list 'org-latex-classes
         '("memoir"
           "\\documentclass[11pt]{memoir}"
	     ("\\part{%s}" . "\\part*{%s}")
           ("\\chapter{%s}" . "\\chapter*{%s}")
           ("\\section{%s}" . "\\section*{%s}")
           ("\\subsection{%s}" . "\\subsection*{%s}")       
           ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
           ("\\paragraph{%s}" . "\\paragraph*{%s}")
           ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))
         )
(add-to-list 'org-latex-classes
         '("book"
           "\\documentclass[11pt]{book}"
	     ("\\part{%s}" . "\\part*{%s}")
           ("\\chapter{%s}" . "\\chapter*{%s}")
           ("\\section{%s}" . "\\section*{%s}")
           ("\\subsection{%s}" . "\\subsection*{%s}")       
           ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
           ("\\paragraph{%s}" . "\\paragraph*{%s}")
           ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))
         )

 ;; tufte-book class for writing classy books
(add-to-list 'org-latex-classes
	     '("tufte-book"
	       "\\documentclass{tufte-book}")
)

(setq org-latex-default-packages-alist
   (quote
    (("AUTO" "inputenc" t
      ("pdflatex"))
     ("T1" "fontenc" t
      ("pdflatex"))
     ("" "graphicx" t)
     ("" "grffile" t)
     ("" "longtable" nil)
     ("" "wrapfig" nil)
     ("" "rotating" nil)
     ("normalem" "ulem" t)
     ("" "amsmath" t)
     ("" "textcomp" t)
     ("" "amssymb" t)
     ("" "capt-of" nil))))
#+END_SRC
*** Org Bullets 
[2018-12-03 Mon 10:42]
#+begin_src emacs-lisp   
 (use-package org-bullets
    
    :hook
    (org-mode . org-bullets-mode)
    :config
    (setq org-bullets-bullet-list '("■" "◆" "▲" "▶"))
    )
#+end_src
*** Org Calfw
[2018-12-20 Thu 11:47]
#+BEGIN_SRC emacs-lisp :tangle no
(use-package calfw)
(use-package calfw-org
  :requires calfw
  :general
  (spacemacs-lite/set-leader-keys "ac" '(cfw:open-org-calendar :wk "calendar"))
  ("C-SPC" 'cfw:show-details-command)
  :config
  (setq cfw:org-agenda-schedule-args nil
	cfw:org-overwrite-default-keybinding t)
)

(use-package calfw-cal)
#+END_SRC
*** Org clock convenience
#+BEGIN_src emacs-lisp   
(use-package org-clock-convenience
  
  :general
  (general-def org-agenda-mode-map
    "<S-up>"   'org-clock-convenience-timestamp-up
    "<S-down>" 'org-clock-convenience-timestamp-down))
#+END_SRC
*** Org Download
[2018-12-08 Sat 18:16]
#+begin_src emacs-lisp   :tangle no
(use-package org-download
  
					; :diminish
  :general
  (spacemacs-lite/set-leader-keys-for-major-mode
    "is" 'org-download-screenshot
    "iy" 'org-download-yank
    )
    
; :config
)
#+end_src
*** Org Pomodoro
[2018-11-29 Thu 08:54]
#+begin_src emacs-lisp   
(use-package org-pomodoro
  :general
  (spacemacs-lite/set-leader-keys-for-major-mode    "p"    'org-pomodoro)
 :config 
 (setq org-pomodoro-length 45)
 (setq org-pomodoro-long-break-frequency 3)
 (setq org-pomodoro-long-break-length 30)
 (setq org-pomodoro-short-break-length 5)
 (setq org-pomodoro-ticking-sound-p t)
 (setq org-pomodoro-ticking-sound-states (quote (:short-break :long-break))))

#+end_src

#+RESULTS:
*** Org Present
[2018-12-12 Wed 17:18]
#+begin_src emacs-lisp   
(use-package org-present
  :defer t
  :general
  (general-def 'normal 'org-present-mode-keymap
    "h" 'org-present-prev
    "l" 'org-present-next
    "q" 'org-present-quit)
  :config
  (defun spacemacs-lite//org-present-start ()
    "Initiate `org-present' mode"
    (evil-emacs-state)
    (org-present-big)
    (org-display-inline-images)
    (org-present-hide-cursor)
    (org-present-read-only))
  (defun spacemacs-lite//org-present-end ()
    "Terminate `org-present' mode"
    (org-present-small)
    (org-remove-inline-images)
    (org-present-show-cursor)
    (org-present-read-write)
    (evil-normal-state))
  :hook    
  ((org-present-mode-hook . spacemacs-lite//org-present-start)
  (org-present-mode-quit-hook . spacemacs-lite//org-present-end)))
#+end_src
*** Org Fancy Priority
#+begin_SRC emacs-lisp
(use-package org-fancy-priorities
  :hook
  (org-mode . org-fancy-priorities-mode)
  :config
  (setq org-fancy-priorities-list '("(#I)" "(#II)" "(#III)" "(#IV)")))
#+end_SRC
*** Org Protocol
#+begin_SRC emacs-lisp 
(use-package org-protocol

;:quelpa (<package-name> :fetcher <github|bitbucket> :repo <name of repo> :files ("<path>/<file.el>")
;) :diminish
; :general
)
#+end_SRC

*** Org Ref
#+begin_src emacs-lisp   :tangle no
(use-package org-ref
  :defer t
  :commands (org-ref-bibtex-next-entry
             org-ref-bibtex-previous-entry
             org-ref-open-in-browser
             org-ref-open-bibtex-notes
             org-ref-open-bibtex-pdf
             org-ref-bibtex-hydra/body
             org-ref-bibtex-hydra/org-ref-bibtex-new-entry/body-and-exit
             org-ref-sort-bibtex-entry
             arxiv-add-bibtex-entry
             arxiv-get-pdf-add-bibtex-entry
             doi-utils-add-bibtex-entry-from-doi
             isbn-to-bibtex
             pubmed-insert-bibtex-from-pmid)
  :config
  (add-to-list 'load-path ".")
  (require 'org-ref-citeproc)
  
  (let ((org-export-before-parsing-hook '(orcp-citeproc)))
    (browse-url (org-html-export-to-html)))
  
  :general
  (spacemacs-lite/set-leader-keys-for-major-mode 'normal bibtex-mode-map
    (kbd "C-j") 'org-ref-bibtex-next-entry
    (kbd "C-k") 'org-ref-bibtex-previous-entry
    "gj" 'org-ref-bibtex-next-entry
    "gk" 'org-ref-bibtex-previous-entry)
    
  (spacemacs-lite/set-leader-keys-for-major-mode 'bibtex-mode
    ;; Navigation
    "j" 'org-ref-bibtex-next-entry
    "k" 'org-ref-bibtex-previous-entry
    
    ;; Open
    "b" 'org-ref-open-in-browser
    "n" 'org-ref-open-bibtex-notes
    "p" 'org-ref-open-bibtex-pdf
    
    ;; Misc
    "h" 'org-ref-bibtex-hydra/body
    "i" 'org-ref-bibtex-hydra/org-ref-bibtex-new-entry/body-and-exit
    "s" 'org-ref-sort-bibtex-entry
    
    ;; Lookup utilities
    "la" 'arxiv-add-bibtex-entry
    "lA" 'arxiv-get-pdf-add-bibtex-entry
    "ld" 'doi-utils-add-bibtex-entry-from-doi
    "li" 'isbn-to-bibtex
    "lp" 'pubmed-insert-bibtex-from-pmid
    
    "ic" 'org-ref-helm-insert-cite-link)

  :hook (org-mode-hook . org-ref))

#+end_src
*** Org Reveal

#+begin_src emacs-lisp 
(with-eval-after-load 'org
  (require 'ox-reveal)
)
#+end_src
*** Org web tools
[2019-01-09 Wed 13:03]
#+begin_src emacs-lisp :tangle no
(use-package org-web-tools
  :requires esxml)
#+end_src
*** Ox Hugo
#+begin_SRC emacs-lisp
(use-package ox-hugo
  :config
  (setq org-export-with-author nil)
  ;; Populates only the EXPORT_FILE_NAME property in the inserted headline.
  (with-eval-after-load 'org-capture
    (defun org-hugo-new-subtree-post-capture-template ()
      "Returns `org-capture' template string for new Hugo post.
See `org-capture-templates' for more information."
      (let* ((title (read-from-minibuffer "Post Title: ")) ;Prompt to enter the post title
	     (fname (org-hugo-slug title)))
	(mapconcat #'identity
		   `(
		     ,(concat "* TODO " title)
		     ":PROPERTIES:"
		     ,(concat ":EXPORT_FILE_NAME: " fname)
		     ":END:"
		     "%?\n")          ;Place the cursor here finally
		   "\n")))
    
    (add-to-list 'org-capture-templates
		 '("h"                ;`org-capture' binding + h
		   "Hugo post"
		   entry
		   ;; It is assumed that below file is present in `org-directory'
		   ;; and that it has a "Blog Post Ideas" heading. It can even be a
		   ;; symlink pointing to the actual location of all-posts.org!
		   (file+olp "balaramadurai.net.org" "Blog Post Ideas")
		   (function org-hugo-new-subtree-post-capture-template))))
  )
#+end_SRC
*** Gnuplot
[2018-12-05 Wed 09:33]
#+begin_src emacs-lisp   
(use-package gnuplot
    :defer t
    :general 
    (spacemacs-lite/set-leader-keys         "ap" '(org-plot/gnuplot :which-key "gnuplot")))
#+end_src
** Persp Mode
[2019-01-16 Wed 18:26]
#+begin_src emacs-lisp :tangle no
(use-package persp-mode
:init
    (progn
      (setq persp-nil-name "main"
            persp-reset-windows-on-nil-window-conf nil
            persp-set-last-persp-for-new-frames nil
            persp-save-dir "~/.emacs.d/persp-confs"
            persp-set-ido-hooks t))

;:quelpa (<package-name> :fetcher <github|bitbucket> :repo <name of repo> :files ("<path>/<file.el>")
;) :diminish
; :general
)
#+end_src
** Projectile
[2018-12-04 Tue 08:55]
#+begin_src emacs-lisp   :tangle no
(use-package projectile

:diminish (projectile-mode . " ⓟ"))
#+end_src
** Restart Emacs
#+BEGIN_src emacs-lisp   
(use-package restart-emacs
  
 :config
  (defun spacemacs-lite/restart-emacs-debug-init (&optional args)
    "Restart emacs and enable debug-init."
    (interactive)
    (restart-emacs (cons "--debug-init" args)))
   :general
   (spacemacs-lite/set-leader-keys 
     "qr"   'restart-emacs
     "qd"   '(spacemacs-lite/restart-emacs-debug-init :which-key "quit with debug-init")
     )
   )
#+END_SRC

** Smartparens
[2018-12-04 Tue 15:33]
#+begin_src emacs-lisp :tangle no 
(use-package smartparens

:diminish (smartparens-mode . " Ⓢ"))
#+end_src

** Shell pop
[2018-12-06 Thu 09:11]
#+begin_src emacs-lisp   
(use-package shell-pop
  
  :commands (shell-pop)
  :config
  (setq shell-pop-shell-type (quote ("ansi-term" "*ansi-term*" (lambda nil (ansi-term shell-pop-term-shell)))))
  (setq shell-pop-term-shell "/bin/bash")
  (setq shell-pop-window-position "full")
  (setq shell-pop-window-size 80)
  :general
  (spacemacs-lite/set-leader-keys "at" 'shell-pop))
#+end_src

** TOC org
[2018-12-05 Wed 08:39]
#+begin_src emacs-lisp   
(use-package toc-org

:init (toc-org-mode 1))
#+end_src
 
** Undo Tree
[2019-01-05 Sat 09:22]
#+begin_src emacs-lisp 
(use-package undo-tree
  
					;:quelpa (<package-name> :fetcher <github|bitbucket> :repo <name of repo> :files ("<path>/<file.el>")
  :diminish
  
  (undo-tree-mode . " Ⓤ")
  :general
  (spacemacs-lite/set-leader-keys "au" 'undo-tree-visualize)
  :config
  (progn
    (global-undo-tree-mode)
    (setq undo-tree-visualizer-timestamps t)
    (setq undo-tree-visualizer-diff t))
  )


#+end_src
** W3m
[2018-11-13 Tue 10:00]
#+BEGIN_src emacs-lisp   
(use-package w3m
  
  :general 
  (spacemacs-lite/set-leader-keys
    "sw"  '(:ignore t :which-key "web")
    "swd" 'w3m-search)
  :config 
  (setq w3m-search-default-engine "duckduckgo")
)
#+END_SRC
** Writeroom
#+BEGIN_src emacs-lisp  
(use-package writeroom-mode
:defer t

:init
;;; writemode hooks
   (defun my-writemode-mode-hooks ()
     (wc-mode 1)
     (writegood-mode 1)
     )


:hook (writeroom-mode-hook . my-writeroom-mode-hooks)

:general
  (spacemacs-lite/set-leader-keys "wc" '(writeroom-mode :wk "distraction-free"))
)
#+END_SRC

** Writing Mode

#+BEGIN_src emacs-lisp   
(use-package writegood-mode
  
:config
(setq writegood-weasel-words
   (quote
    ("many" "various" "very" "fairly" "several" "extremely" "exceedingly" "quite" "remarkably" "surprisingly" "mostly" "largely" "huge" "tiny" "are a number" "is a number" "excellent" "interestingly" "significantly" "substantially" "clearly" "vast" "relatively" "completely" "literally" "not rocket science" "outside the box" "about" "just" "really" "started" "began" "all" "again" "very" "that" "any" "so" "then" "rather" "some" "only" "almost" "like" "close" "even" "somehow" "sort" "pretty" "well" "back" "up" "down ,anyway" "many" "real" "already" "own" "over" "ever" "be able to" "still" "bit" "far" "often" "also" "enough" "quite" "maybe" "one of" "thing" "mostly" "most" "in order to" "off" "out" "as" "while" "since" "when" "before" "after")))
)

(use-package wc-mode
  
)

#+END_SRC

#+BEGIN_src emacs-lisp   

(defvar br/writing-mode-status nil)

(defun br/org-export-as-pdf ()
  (interactive)
  (save-buffer)
  (org-latex-export-to-pdf))

(defun br/writing-mode ()
  (interactive)
  ;; Writing
  (setq br/writing-mode-status (not br/writing-mode-status))

  (if br/writing-mode-status
      (progn
       (writegood-mode t)
       (wc-mode t)
       (olivetti-mode 1)
       (flyspell-mode t)
       (set-frame-parameter nil 'font "Latin Modern Roman Unslanted")
;       (add-hook 'after-save-hook 'br/org-export-as-pdf)
       (message "Writing mode enabled! Enjoy your writing")
       )
    (progn
     (writegood-mode -1)
     (wc-mode -1)
     (olivetti-mode -1)
     (flyspell-mode -1)
     (set-frame-parameter nil 'font "Iosevka")
;     (set-fringe-style nil)
     ;; (set-fringe-mode
     ;;  (/ (- (frame-pixel-width)
     ;; 	    (* 100 (frame-char-width)))
     ;; 	 2))
 ;    (remove-hook 'after-save-hook 'br/org-export-as-pdf)
     (message "Writing mode disabled! Have a nice day!")
     ))

;;  (mode-line-in-header)  
  (toggle-frame-fullscreen)
  (force-mode-line-update)
  (redraw-display)
  
  )

#+END_SRC

** Zoom
[2019-01-09 Wed 09:42]
#+begin_src emacs-lisp
(use-package zoom
  :config
  ;; Golden Ratio
  (setq zoom-size '(0.618 . 0.618))
  (zoom-mode t))
#+end_src
* Look & Feel
** Theme
#+BEGIN_src emacs-lisp
(use-package poet-theme)
#+END_SRC

** Window Numbering

#+BEGIN_src emacs-lisp  
(use-package winum

:general
(spacemacs-lite/set-leader-keys "1" 'winum-select-window-1
  "2" 'winum-select-window-2
  "3" 'winum-select-window-3)
:config
(setq winum-auto-setup-mode-line nil)
)
#+END_SRC

** Modeline
#+begin_src emacs-lisp   
(use-package spaceline
  
  ;; :disabled t
  :config
  (require 'spaceline-config)
  (setq powerline-default-separator 'wave
        spaceline-minor-modes-separator " ")
  (setq spaceline-window-numbers-unicode t)
  (setq spaceline-org-pomodoro-p t)
  (setq spaceline-highlight-face-func 'spaceline-highlight-face-evil-state)
  (spaceline-toggle-window-number-on)
  (spaceline-toggle-org-pomodoro-on)
  (spaceline-toggle-hud-on)
  (setq powerline-height 24)
  (setq display-time-format "%b %d %a %R")
  (display-time-mode t)
  (spaceline-spacemacs-theme)
  (winum-mode 1)
  (powerline-reset)
  )

#+end_src

** Emacs stuff

#+BEGIN_src emacs-lisp  
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (winner-mode 1)
  (setq initial-frame-alist (quote ((fullscreen . maximized))))
#+END_SRC

** Graphical Features
*** Prettify Symbols
#+BEGIN_src emacs-lisp   
  (global-prettify-symbols-mode +1)
#+END_SRC

* Emacs Functionality
** Emacs Basics

[2018-01-05 Fri 12:44] 
#+BEGIN_src emacs-lisp   
(global-auto-revert-mode 1)
(setq frame-title-format "%b")

#+END_SRC

** Calendar

Set the start of the week to Saturday

#+BEGIN_src emacs-lisp   
(setq calendar-week-start-day 6);; set start of week to Saturday
; (setq calendar-date-style (quote european))
#+END_SRC

** Browser

[2018-01-05 Fri 12:37] 
#+BEGIN_src emacs-lisp   
(setq browse-url-browser-function (quote browse-url-default-browser))
#+END_SRC

** Backups

This is one of the things people usually want to change right away. By default, Emacs saves backup files in the current directory. These are the files ending in =~= that are cluttering up your directory lists. The following code stashes them all in =~/.emacs.d/backups=, where I can find them with =C-x C-f= (=find-file=) if I really need to.

#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
#+END_SRC

Disk space is cheap. Save lots.

#+BEGIN_SRC emacs-lisp
(setq delete-old-versions -1)
(setq version-control t)
(setq vc-make-backup-files t)
(setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))
#+END_SRC

** History

From http://www.wisdomandwonder.com/wordpress/wp-content/uploads/2014/03/C3F.html
#+BEGIN_SRC emacs-lisp
(setq savehist-file "~/.emacs.d/savehist")
(savehist-mode 1)
(setq history-length t)
(setq history-delete-duplicates t)
(setq savehist-save-minibuffer-history 1)
(setq savehist-additional-variables
      '(kill-ring
        search-ring
        regexp-search-ring))
#+END_SRC

** Save my place or I'll rearrange your face

#+BEGIN_src emacs-lisp   

(setq-default save-place t)
#+END_SRC
** Detect Internet Connection
#+BEGIN_src emacs-lisp   
  (defun internet-up-p (&optional host)
    (= 0 (call-process "ping" nil nil nil "-c" "1" "-W" "1"
                       (if host host "www.google.com"))))
#+END_SRC

* Startup Buffer
** Emacs Dashboard
[2018-12-04 Tue 08:36]
Make the similarity to spacemacs complete :smiley:
#+begin_src emacs-lisp   
(use-package dashboard
  
  :config
  (setq dashboard-banner-logo-title
        (message " ★ Emacs initialized in %.2fs ★ "
                 (float-time (time-subtract (current-time) my-init-el-start-time))))
  (setq dashboard-items '((recents . 10)
			  (agenda . 10)
			  (projects . 10)
                          )) 
  (dashboard-setup-startup-hook))
#+end_src

* Lastly
Alternate melpa, org and gnu package repos
#+begin_src emacs-lisp  :tangle no 
~/.emacs.d/user-init.el
(setq package-archives
      '(("melpa" . "https://raw.githubusercontent.com/d12frosted/elpa-mirror/master/melpa/")
        ("org"   . "https://raw.githubusercontent.com/d12frosted/elpa-mirror/master/org/")
        ("gnu"   . "https://raw.githubusercontent.com/d12frosted/elpa-mirror/master/gnu/")))
#+end_src

#+begin_src emacs-lisp   
(eval-and-compile
(add-hook 'emacs-startup-hook '(lambda ()
                (setq gc-cons-threshold 16777216
                        gc-cons-percentage 0.1
                        ))))
(provide 'init)
;;; init ends here
#+end_src

