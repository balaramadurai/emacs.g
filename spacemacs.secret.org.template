#+TITLE: Your secret files

* Python
[2018-12-05 Wed 19:15]
#+begin_src emacs-lisp :tangle init.el
(use-package company-jedi
  :hook (python-mode . my-python-mode-hook)
  :config
  (defun my-python-mode-hook ()
    (setq-local company-backends '(company-jedi)))
;  (if (eq system-type 'darwin)
;    (setq python-shell-exec-path "/usr/local/miniconda3/bin"
;          python-shell-interpreter "/usr/local/miniconda3/bin/python")
;    (setq python-shell-interpreter "python3"))
  :general
   ('(normal visual) python-mode-map
    "]]"  'python-nav-forward-defun
    "[["  'python-nav-backward-defun
    "gj"  'python-nav-forward-block
    "gk"  'python-nav-backward-block)

  (mode-def python-mode-map
   ""      nil
   "mg"   'jedi:goto-definition
   "mb"   'jedi:goto-definition-pop-marker))

(use-package ob-ipython
  :ensure t
  :hook (org-mode . my-ob-ipython-hook)
  :config
  (defun my-ob-ipython-hook ()
    (with-eval-after-load 'org-babel
      (progn
        (require 'ob-ipython)
        (setq ob-ipython-suppress-execution-count t)
        (add-to-list 'company-backends 'company-ob-ipython)))))
(org-babel-do-load-languages
 (quote org-babel-load-languages)
 (quote (
         (ipython . t)
         )))


#+end_src
* Gcal
#+BEGIN_SRC emacs-lisp :tangle yes
;; (require 'org-gcal)
(setq org-gcal-client-id "XXXXX.apps.googleusercontent.com"
       org-gcal-client-secret "XXXXX"
       org-gcal-file-alist '(("XXXXX@gmail.com" .  "~/org/mycal.org")
                             ("XXXXX@group.calendar.google.com" .  "~/org/sharedcal.org")))
#+END_SRC


* Mu4e settings
[2018-12-08 Sat 23:43]
#+begin_src emacs-lisp :tangle yes
(setq mu4e-user-mail-address-list
(quote
 ("me@foo.example.com" "me@bar.example.com"))
)
;; 1) messages to me@foo.example.com should be replied with From:me@foo.example.com
;; 2) messages to me@bar.example.com should be replied with From:me@bar.example.com
;; 3) all other mail should use From:me@cuux.example.com
(add-hook 'mu4e-compose-pre-hook
	  (defun my-set-from-address ()
	    "Set the From address based on the To address of the original."
	    (let ((msg mu4e-compose-parent-message)) ;; msg is shorter...
	      (when msg
		(setq user-mail-address
		      (cond
		       ((mu4e-message-contact-field-matches msg :to "me@foo.example.com")
			"me@foo.example.com")
		       ((mu4e-message-contact-field-matches msg :to "me@bar.example.com")
			"me@bar.example.com")
     		       (t "me@bar.example.com")))))))
#+end_src
